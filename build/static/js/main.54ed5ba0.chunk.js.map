{"version":3,"sources":["store/taskSlice.ts","components/Task/index.tsx","components/TaskList/index.tsx","components/InputScreen/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["taskSlice","createSlice","name","initialState","id","title","state","reducers","archiveTask","action","map","task","payload","pinTask","store","configureStore","reducer","actions","Task","dispatch","onArchiveTask","onPinTask","useDispatch","className","type","defaultChecked","disabled","onClick","value","readOnly","placeholder","event","stopPropagation","TaskList","loading","tasks","events","LoadingRow","length","tasksInOrder","filter","t","key","InboxScreen","error","defaultTasks","useSelector","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54ed5ba0.chunk.js","sourcesContent":["import {createSlice,PayloadAction,configureStore} from '@reduxjs/toolkit';\nimport { TaskInterface } from '../components/Task';\n\nconst initialState:TaskInterface[]=[\n    { id: '1', title: 'Something', state: 'TASK_INBOX' },\n    { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n    { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n    { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n  ];\nconst taskSlice=createSlice({\n    name:'Task',\n    initialState,\n    reducers:{\n        archiveTask(state,action:PayloadAction<string>){\n            return state.map((task:TaskInterface)=>task.id === action.payload ? { ...task, state: 'TASK_ARCHIVED' } : task)\n        },\n        pinTask(state,action:PayloadAction<string>){\n            return state.map((task:any)=>task.id === action.payload ? { ...task, state: 'TASK_PINNED' } : task)\n        }\n    }\n})\n\n\nexport const store=configureStore({reducer:taskSlice.reducer});\n\nexport const {archiveTask,pinTask} =taskSlice.actions;\nexport default taskSlice.reducer;\n","import * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport '../../index.css';\nimport {archiveTask,pinTask} from '../../store/taskSlice';\n\n\n\nexport interface TaskInterface{\n  id:string,\n  title:string,\n  state:any,\n  updatedAt?:Date\n}\n\nexport interface TaskProps {\n    task:TaskInterface,\n    onArchiveTask?:any,\n    onPinTask?:any\n}\n \nconst Task: React.SFC<TaskProps> = ({task:{id,title,state},onArchiveTask,onPinTask}) => {\n\n    const dispatch=useDispatch();\n    \n    return ( \n        <div className={`list-item ${state}`}>\n        <label className=\"checkbox\">\n          <input\n            type=\"checkbox\"\n            defaultChecked={state === 'TASK_ARCHIVED'}\n            disabled={true}\n            name=\"checked\"\n            \n          />\n          <span className=\"checkbox-custom\" onClick={() => dispatch(archiveTask(id))} />\n        </label>\n        <div className=\"title\">\n          <input type=\"text\" value={title} readOnly={true} placeholder=\"Input title\" />\n        </div>\n  \n        <div className=\"actions\" onClick={event => event.stopPropagation()}>\n          {state !== 'TASK_ARCHIVED' && (\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a onClick={() => dispatch(pinTask(id))}>\n              <span className={`icon-star`} />\n            </a>\n          )}\n        </div>\n      </div>\n     );\n}\n \n\n\nexport default Task;","import React from 'react';\nimport Task, { TaskInterface } from '../Task';\nimport '../../index.css';\n\n\n\n\nexport interface TaskListProps {\n    loading: boolean,\n    tasks: TaskInterface[],\n    onPinTask?: any,\n    onArchiveTask?: any\n}\n\nconst TaskList: React.SFC<TaskListProps> = ({ loading, tasks, onPinTask, onArchiveTask }) => {\n    const events = {\n        onPinTask,\n        onArchiveTask\n    }\n\n    \n\n    const LoadingRow = (\n        <div className=\"loading-item\">\n            <span className=\"glow-checkbox\" />\n            <span className=\"glow-text\">\n                <span>Loading</span>  <span>cool</span> <span>state</span>\n            </span>\n        </div>\n    )\n\n    if (loading) {\n        return (\n            <div className=\"list-items\">\n                {LoadingRow}\n                {LoadingRow}\n                {LoadingRow}\n                {LoadingRow}\n                {LoadingRow}\n                {LoadingRow}\n            </div>\n        );\n    }\n    if (tasks?.length === 0) {\n        return (\n            <div className=\"list-items\">\n                <div className=\"wrapper-message\">\n                    <span className=\"icon-check\" />\n                    <div className=\"title-message\">You have no tasks</div>\n                    <div className=\"subtitle-message\">Sit back and relax</div>\n                </div>\n            </div>\n        );\n    }\n\n    const tasksInOrder = [\n        ...tasks.filter(t => t.state === 'TASK_PINNED'),\n        ...tasks.filter(t => t.state !== 'TASK_PINNED'),\n    ];\n\n\n    return (\n        <div className=\"list-items\">\n            {tasksInOrder.map(task => (\n                <Task key={task.id} task={task} {...events} />\n            ))}\n        </div>\n\n    );\n}\n\nexport default TaskList","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport TaskList from '../TaskList';\nimport { TaskInterface } from '../Task';\n\nexport function InboxScreen({ error}:any) {\n    const defaultTasks=useSelector((state:TaskInterface[])=>state);\n  if (error) {\n    return (\n      <div className=\"page lists-show\">\n        <div className=\"wrapper-message\">\n          <span className=\"icon-face-sad\" />\n          <div className=\"title-message\">Oh no!</div>\n          <div className=\"subtitle-message\">Something went wrong</div>\n        </div>\n      </div>\n    );\n  }\n \n\n  return (\n    <div className=\"page lists-show\">\n      <nav>\n        <h1 className=\"title-page\">\n          <span className=\"title-wrapper\">Taskbox</span>\n        </h1>\n      </nav>\n      <TaskList tasks={defaultTasks} loading={false} />\n    </div>\n  );\n}\n\nexport default InboxScreen;","import React from 'react';\nimport './App.css';\nimport InboxScreen from './components/InputScreen';\nimport { store } from './store/taskSlice';\nimport { Provider } from 'react-redux';\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n      <InboxScreen />\n    </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/taskSlice';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}